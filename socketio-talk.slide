Using a Socket.Io Client Implementation for Go
Westside GoLang Meetup (Los Angeles, CA)

12 Apr 2018
Tags: socket.io, protocol, web

Henrique Vicente
Software Engineer, WeDeploy (Liferay, Inc.)
henrique.vicente@liferay.com
https://henvic.github.io/
@henriquev

https://talks.godoc.org/github.com/henvic/socketio-talk/socketio-talk.slide

* Why socket.io
1. Project I work on already used it.
2. Front-end and Node.JS developers are familiar.
3. A web prototype was already built using it.

.image wedeploy.png 700 _

* Why not
1. Standards for the protocol?
2. JavaScript-centric. No complete implementation on other languages.
3. How can I validate an implementation? No conformance testing suite.
4. What about pure WebSocket instead?

* Why I ended up using socket.io
Long pooling was okay for some CLI commands such as:
1. Listing projects
2. Following logs

However, a new feature request required streaming:
1. "we exec"
2. "we shell"

.image watch.png 500 _

* Finally found something!
.image graarh-golang-socketio.png 400 _

.link https://github.com/graarh/golang-socketio github.com/graarh/golang-socketio
Cool, I don't to reverse engineer Socket.IO... Or do I?

* Bad news... Need to reverse engineer Socket.IO
.caption Okay :( And eventually got rid of the server implementation (I don't need this).
.image charles-proxy-colored.png 700 _

* Reverse Engineering Socket.IO with Charles Proxy (or Wireshark)
.image charles-proxy.png 700 _

* Docs
.image api.png 500 _
.link https://godoc.org/github.com/henvic/socketio

* github.com/henvic/socketio/example/example.go
.code -numbers example.go 39,57

socketio.Connect handles the connection handshake (blocking).
Use socketio.DialOnly *only* _if_ you are debugging this part.

* github.com/henvic/socketio/example/example.go
.code -numbers example.go 18,21
.code -numbers example.go 58,60

Use anything that can be unmarshaled by json.Unmarshal:
.code -numbers example.go 130,132

* Working with ACKs
.code -numbers example.go 23,29
.code -numbers example.go 104,117

* Current implementation
1. ack support
2. namespaces support
3. basic events support (connect, disconnect, error)

TODO:
1. room support
2. binary protocol support

Need to improve: testing.

*Help* *is* *welcome!*
